//////////////////////////////////////////////////////////////////////////////////
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import com.sun.prism.paint.Color;
//import static empleado.TEMPLATE_PROPERTY;
import java.awt.Dimension;
import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
////////////////////////////////////////////////////////////////////////////////////
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sistemas
 */
public class reloj extends javax.swing.JFrame implements Runnable{
    
    //Variables que ayudan a capturar, enrolar y verificar
    private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();
    private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featureinscripcion;
    public DPFPFeatureSet featureverificacion;

    /////////////////////////
    conexionMysql con = new conexionMysql();
    private Dimension dim;
    String codigo;
    String idEmpresa;
    //////////////////////////////////
    
    /** Declaramos las variables que van a contener los resultados de salida */
    private String nomTurno;
    private String tipoAcceso;
    Date date = new Date();
    int hora, minutos, segundos;
    Calendar calendario;
    Thread h1;
    /**
     * Creates new form reloj
     */
    public reloj(String nomTurno, String tipoAcceso) {
        initComponents();
        h1 = new Thread(this);
        h1.start();
        this.nomTurno = nomTurno;
        this.tipoAcceso = tipoAcceso;
        setLocationRelativeTo(null);//para centrar la ventana
        setVisible(true);
        //this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
    }

    private reloj() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        while (ct == h1) {
            calcula();
            lblHora.setText(hora + ":" + minutos + ":" + segundos);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
            }
        }
    }
    public void calcula() {
        Calendar calendario = new GregorianCalendar();
        hora =calendario.get(Calendar.HOUR_OF_DAY);
        minutos = calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rSPanelsSlider1 = new rojeru_san.RSPanelsSlider();
        jPanel1 = new javax.swing.JPanel();
        rSPanelsSlider2 = new rojeru_san.RSPanelsSlider();
        jPanel2 = new javax.swing.JPanel();
        rSPanelImage1 = new rojerusan.RSPanelImage();
        btnMinimizar = new rojeru_san.RSButtonRiple();
        btnCerrar = new rojeru_san.RSButtonRiple();
        lblEmpresa = new javax.swing.JLabel();
        rSPanelsSlider3 = new rojeru_san.RSPanelsSlider();
        jPanel3 = new javax.swing.JPanel();
        rSPanelImage2 = new rojerusan.RSPanelImage();
        jPanel4 = new javax.swing.JPanel();
        lblHora = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblImagenHuella = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        lblCodigo = new javax.swing.JLabel();
        lblRfc = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        lblTurno = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        lblAcceso = new javax.swing.JLabel();
        lblCodigo1 = new javax.swing.JLabel();
        lblCodigo2 = new javax.swing.JLabel();
        lblCodigo3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(88, 90, 78));

        rSPanelImage1.setImagen(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N

        javax.swing.GroupLayout rSPanelImage1Layout = new javax.swing.GroupLayout(rSPanelImage1);
        rSPanelImage1.setLayout(rSPanelImage1Layout);
        rSPanelImage1Layout.setHorizontalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );
        rSPanelImage1Layout.setVerticalGroup(
            rSPanelImage1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        btnMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/btn-minimizar.png"))); // NOI18N
        btnMinimizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizarActionPerformed(evt);
            }
        });

        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/btn-cerrar.png"))); // NOI18N
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        lblEmpresa.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        lblEmpresa.setForeground(new java.awt.Color(255, 255, 255));
        lblEmpresa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmpresa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rSPanelImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1102, Short.MAX_VALUE)
                .addComponent(btnMinimizar, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(321, 321, 321)
                    .addComponent(lblEmpresa, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
                    .addContainerGap(292, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rSPanelImage1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMinimizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        rSPanelsSlider2.add(jPanel2, "card2");

        jPanel3.setBackground(new java.awt.Color(88, 90, 78));

        rSPanelImage2.setImagen(new javax.swing.ImageIcon(getClass().getResource("/logo.png"))); // NOI18N

        javax.swing.GroupLayout rSPanelImage2Layout = new javax.swing.GroupLayout(rSPanelImage2);
        rSPanelImage2.setLayout(rSPanelImage2Layout);
        rSPanelImage2Layout.setHorizontalGroup(
            rSPanelImage2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );
        rSPanelImage2Layout.setVerticalGroup(
            rSPanelImage2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(1223, Short.MAX_VALUE)
                .addComponent(rSPanelImage2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rSPanelImage2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rSPanelsSlider3.add(jPanel3, "card2");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 112, 192), 5, true));

        lblHora.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        lblHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHora.setText("00:00:00");
        lblHora.setFocusable(false);
        lblHora.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHora, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("TIPO DE ACCESO");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TURNO");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblImagenHuella.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtArea.setColumns(20);
        txtArea.setRows(5);
        jScrollPane2.setViewportView(txtArea);

        lblCodigo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblCodigo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblRfc.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblRfc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblNombre.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 112, 192), 5, true));

        lblTurno.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblTurno.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTurno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 112, 192), 5, true));
        jPanel7.setPreferredSize(new java.awt.Dimension(307, 60));

        lblAcceso.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblAcceso.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAcceso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAcceso, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCodigo1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblCodigo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCodigo1.setText("NOMBRE DE EMPLEADO");

        lblCodigo2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblCodigo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCodigo2.setText("RFC DE EMPLEADO");

        lblCodigo3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblCodigo3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCodigo3.setText("CÓDIGO DE EMPLEADO");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelsSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(rSPanelsSlider3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblImagenHuella, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(123, 123, 123)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCodigo3, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo1, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodigo2, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRfc, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(123, 123, 123)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(49, 49, 49))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(rSPanelsSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lblCodigo3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(lblCodigo1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCodigo2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(lblRfc, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addComponent(lblImagenHuella, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(29, 29, 29)
                .addComponent(rSPanelsSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        rSPanelsSlider1.add(jPanel1, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelsSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelsSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMinimizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizarActionPerformed
        // TODO add your handling code here:
        setExtendedState(ICONIFIED);
    }//GEN-LAST:event_btnMinimizarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        turno formTurno = new turno();
        formTurno.setLocationRelativeTo(null);
        this.setVisible(false);
        formTurno.setVisible(true);
        h1.stop();
        stop();
        //
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        
        //Carga lo datos obtenidos de otro formulario
        lblEmpresa.setText(login.nomEmpresa);
        lblTurno.setText(nomTurno);
        lblAcceso.setText(tipoAcceso);
        
        //Inicia Lector de Huella
        Iniciar();
        start();
        //Muestra el estatus del Lector
        //EstadoHuellas();
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(reloj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(reloj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(reloj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(reloj.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new reloj().setVisible(true);
            }
        });
    }
    
    
    //Metodos runable (Eventos del Lector de Huella)
    protected void Iniciar() {

        Lector.addDataListener(new DPFPDataAdapter() 
        {
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("Huella Capturada");
                        try {
                            procesarCaptura(e.getSample());
                            identificarHuella();
                        } catch (IOException ex) {
                            Logger.getLogger(reloj.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(reloj.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (NoSuchAlgorithmException ex) {
                            Logger.getLogger(reloj.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                });
            }
        });

        Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() 
        {
            @Override
            public void readerConnected(DPFPReaderStatusEvent dpfprs) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        EnviarTexto("Sensor de Huella Activado o conectado");
                    }
                });
            }

            @Override
            public void readerDisconnected(DPFPReaderStatusEvent dpfprs) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        EnviarTexto("Sensor de Huella esta desactivado o no conectado");
                    }
                });
            }
        });

        Lector.addSensorListener(new DPFPSensorAdapter() 
        {
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        EnviarTexto("El dedo ha sido colocado sobre el lector de huella");
                    }
                });
            }

            public void fingerGone(final DPFPSensorAdapter e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        EnviarTexto("El dedo ha sido quitado del lector de huella");
                    }
                });
            }
        });

        Lector.addErrorListener(new DPFPErrorAdapter() 
        {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        EnviarTexto("Error: " + e.getError());
                    }
                });
            }
        });

    }
    //////////////////////////////////////////
    
    
     //////////////////////////////// otros metodos
    public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            return null;
        }
    }
    /* Guarda los datos de la huella digital actual en la base de datos
     */
    public void guardarHuella() throws FileNotFoundException, IOException {
        //Obtiene los datos del template de la huella actual
        ByteArrayInputStream datosHuella = new ByteArrayInputStream(template.serialize());
        //Integer tamañoHuella = template.serialize().length;
        try {
            
            Connection c = con.conectar(); //establece la conexion con la BD
            String sql = "SELECT * FROM ms_empleado WHERE codigo = ? AND ID_EMPRESA = ?";

            /*System.out.println("" + sql);
            System.out.println("" + codigo);
            System.out.println("" + idEmpresa);*/

            PreparedStatement pstmt = c.prepareStatement(sql);
            pstmt.setString(1, codigo);
            pstmt.setString(2, idEmpresa);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                //read the data from ResultSet
                PreparedStatement guardar = c.prepareStatement("UPDATE ms_empleado SET huella = ? WHERE codigo = ? AND ID_EMPRESA = ?");
                guardar.setBinaryStream(1, datosHuella);
                guardar.setString(2, codigo);
                guardar.setString(3, idEmpresa);
                guardar.execute();
                guardar.close();

                JOptionPane.showMessageDialog(null, "Huella Guardada Correctamente");
            } else {
                JOptionPane.showMessageDialog(null, "El empleado no existe");
            }
            rs.close();
            pstmt.close();

            con.desconectar();

           // btnGuardar.setEnabled(false);
            //btnVerificar.grabFocus();
        } catch (SQLException ex) {
            //Si ocurre un error lo indica en la consola
            System.err.println("Error al guardar los datos de la huella." + ex);
        } finally {
            con.desconectar();
        }
    }
    
    /**
     * Verifica la huella digital actual contra otra en la base de datos
     */
    
    public void identificarHuella() throws IOException, SQLException, NoSuchAlgorithmException {
        try 
        {
            //Establece los valores para la sentencia SQL
            String day = new SimpleDateFormat("HH:mm:ss").format(date);
            String nowDate = new SimpleDateFormat("yyyy-MM-dd").format(date);
            String nowDateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(date);
            String sql, idEmpleado, codigo, rfc,nombreEmpleado,horaInicio, horaFin, lun, mar, mie, jue, vie, sab, dom, minTolerancia,bandera = "0";
            PreparedStatement pstmt;
            ResultSet rs;
            Connection c = con.conectar();
            
            //Se extraen datos del empleado para comparar con la huella
            sql = "SELECT ID_EMPLEADO,codigo,nombre,apellidoPaterno AS ap,apellidoMaterno AS am,rfc,huella FROM ms_empleado WHERE ID_EMPRESA = '"+login.idEmpresa+"'";
            System.out.println(sql);
            pstmt = c.prepareStatement(sql);
            rs = pstmt.executeQuery();
            while (rs.next()) 
            {
                //Datos empleado
                idEmpleado = rs.getString("ID_EMPLEADO");
                codigo = rs.getString("codigo");
                nombreEmpleado = rs.getString("nombre")+" "+rs.getString("ap")+" "+rs.getString("am");
                rfc = rs.getString("rfc");
                byte templateBuffer[] = rs.getBytes("huella");
                
                //Crea una nueva plantilla a partir de la guardada en la base de datos
                DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
                
                //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
                setTemplate(referenceTemplate);
                
                // Compara las caracteriticas de la huella recientemente capturda con la
                // alguna plantilla guardada en la base de datos que coincide con ese tipo
                DPFPVerificationResult result = Verificador.verify(featureverificacion, getTemplate());
                
                //compara las plantilas (actual vs bd)
                //Si encuentra correspondencia dibuja el mapa
                //e indica el nombre de la persona que coincidió.
                if (result.isVerified()) 
                {
                    bandera = "1";
                    lblCodigo.setText(codigo);
                    lblNombre.setText(nombreEmpleado);
                    lblRfc.setText(rfc);
                    
                    //Valida si el empleado pertenece al turno
                    sql = "SELECT T0.horaInicio,T0.horaFin,T0.lunes,T0.martes,T0.miercoles,T0.jueves,T0.viernes,T0.sabado,T0.domingo,T0.minTolerancia FROM ms_turno T0 LEFT JOIN ms_turnoempleado T1 ON T0.ID_TURNO = T1.ID_TURNO WHERE T0.nombre = '"+nomTurno+"' AND T1.ID_EMPLEADO = "+idEmpleado+" LIMIT 1";
                    System.out.println(sql);
                    pstmt = c.prepareStatement(sql);
                    rs = pstmt.executeQuery();
                    if (rs.next() == true)
                    {
                        //Datos del Turno
                        horaInicio = rs.getString("horaInicio");
                        horaFin = rs.getString("horaFin");
                        lun = rs.getString("lunes");
                        mar = rs.getString("martes");
                        mie = rs.getString("miercoles");
                        jue = rs.getString("jueves");
                        vie = rs.getString("viernes");
                        sab = rs.getString("sabado");
                        dom = rs.getString("domingo");
                        minTolerancia = rs.getString("minTolerancia");
                        
                        if("Entrada".equals(tipoAcceso))
                        {
                            //Valida si existe un registro con la fecha del día, antes de ingresar asistencia
                            sql = "SELECT nombreTurno, DATE_FORMAT(hora, '%d-%m-%Y') AS fecha,DATE_FORMAT(hora,'%H:%i:%s') AS hora,(SELECT nombre FROM ms_usuario WHERE codigo = codigoUsuario) As usuario FROM ms_asistencia WHERE DATE(hora) = '"+nowDate+"' AND tipoAcceso = 'Entrada' AND ID_EMPLEADO = '"+idEmpleado+"' AND nombreTurno = '"+nomTurno+"'";
                            System.out.println(sql);
                            pstmt = c.prepareStatement(sql);
                            rs = pstmt.executeQuery();
                            if (rs.next() == true){
                                
                                String nombreTurno = rs.getString("nombreTurno");
                                String fecha = rs.getString("fecha");
                                String usuario = rs.getString("usuario");
                                String horaIngreso = rs.getString("hora");
                                stop();
                                //Enviar msj de que el empleado ya fue registrado (fecha, hora de ingreso,usuario con el que fue ingresado)
                                JOptionPane.showMessageDialog(null,"<html><font color=#FF0000>El empleado ya tiene un registro de Entrada</font> \n"+"Turno: "+nombreTurno+"\n Fecha: "+fecha+" "+horaIngreso+" \n Usuario: "+usuario, "Advertencia", JOptionPane.WARNING_MESSAGE);
                                break;
                            }
                            else
                            {
                                sql = "INSERT INTO ms_asistencia(nombreTurno,hora,tipoAcceso,ID_EMPLEADO,codigoUsuario) VALUES (?,?,?,?,?)";
                                System.out.println(""+sql+login.codUsuario);
                                PreparedStatement preparedStmt = c.prepareStatement(sql);
                                preparedStmt.setString(1,nomTurno);
                                preparedStmt.setString(2,nowDateTime);
                                preparedStmt.setString(3,"Entrada");
                                preparedStmt.setString(4,idEmpleado);
                                preparedStmt.setString(5,login.codUsuario);
                                preparedStmt.executeUpdate();
                                preparedStmt.close();
                            }
                        }
                        else if("Salida".equals(tipoAcceso))
                        {
                            //Valida si horaFin es empty
                            sql = "SELECT nombreTurno, DATE_FORMAT(hora, '%d-%m-%Y') AS fecha,DATE_FORMAT(hora,'%H:%i:%s') AS hora,(SELECT nombre FROM ms_usuario WHERE codigo = codigoUsuario) As usuario FROM ms_asistencia WHERE DATE(hora) = '"+nowDate+"' AND tipoAcceso = 'Salida' AND ID_EMPLEADO = '"+idEmpleado+"' AND nombreTurno = '"+nomTurno+"'";
                            System.out.println(sql);
                            pstmt = c.prepareStatement(sql);
                            rs = pstmt.executeQuery();
                            if (rs.next() == true){
                                
                                String nombreTurno = rs.getString("nombreTurno");
                                String fecha = rs.getString("fecha");
                                String usuario = rs.getString("usuario");
                                String horaIngreso = rs.getString("hora");
                                stop();
                                //Enviar msj de que el empleado ya fue registrado (fecha, hora de ingreso,usuario con el que fue ingresado)
                                JOptionPane.showMessageDialog(null, "<html><font color=#FF0000>El empleado ya tiene un registro de Salida</font> \n Turno: "+nombreTurno+"\n Fecha: "+fecha+" "+horaIngreso+" \n Usuario: "+usuario, "Advertencia", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            }
                            else
                            {
                                sql = "INSERT INTO ms_asistencia(nombreTurno,hora,tipoAcceso,ID_EMPLEADO,codigoUsuario) VALUES (?,?,?,?,?)";
                                System.out.println(""+sql+login.codUsuario);
                                PreparedStatement preparedStmt = c.prepareStatement(sql);
                                preparedStmt.setString(1,nomTurno);
                                preparedStmt.setString(2,nowDateTime);
                                preparedStmt.setString(3,"Salida");
                                preparedStmt.setString(4,idEmpleado);
                                preparedStmt.setString(5,login.codUsuario);
                                preparedStmt.executeUpdate();
                                preparedStmt.close();
                            }
                        }
                        //break;
                    }
                    else //Si el empleado no pertence al turno validar si se da acceso con contraseña de super usuario
                    {
                        String confirmacion = "0";
                        //JOptionPane.showMessageDialog(null, "El empleado no pertence al turno", "Deces agrear aisistencia", JOptionPane.ERROR_MESSAGE);
                        JPanel panel = new JPanel();
                        JLabel label = new JLabel("Para agregar el reguistro se debe firmar con su contraseña de acceso.. \n");
                        JPasswordField pwd = new JPasswordField(10);
                        panel.add(label);
                        panel.add(pwd);
                        String[] options = new String[]{"OK", "Cancel"};
                        int option = JOptionPane.showOptionDialog(null, panel,"El empleado no pertence al turno.", JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                         null, options, options[1]);
                        
                        //System.out.println(option);
                        if(option == 0)
                        {
                            String contrasenia = new String(pwd.getPassword());
                            sql = "SELECT * FROM ms_usuario WHERE codigo = BINARY '"+login.codUsuario+"' AND contrasenia = '"+sha1(contrasenia)+"' AND estatus = 1";
                            System.out.println(sql);
                            pstmt = c.prepareStatement(sql);
                            rs = pstmt.executeQuery();
                            if (rs.next() == true){
                               confirmacion = "1";
                            }
                            
                            if("Entrada".equals(tipoAcceso) && "1".equals(confirmacion))
                            {
                                //Valida si existe un registro con la fecha del día, antes de ingresar asistencia
                                sql = "SELECT nombreTurno, DATE_FORMAT(hora, '%d-%m-%Y') AS fecha,DATE_FORMAT(hora,'%H:%i:%s') AS hora,(SELECT nombre FROM ms_usuario WHERE codigo = codigoUsuario) As usuario FROM ms_asistencia WHERE DATE(hora) = '"+nowDate+"' AND tipoAcceso = 'Entrada' AND ID_EMPLEADO = '"+idEmpleado+"' AND nombreTurno = '"+nomTurno+"'";
                                System.out.println(sql);
                                pstmt = c.prepareStatement(sql);
                                rs = pstmt.executeQuery();
                                if (rs.next() == true){

                                    String nombreTurno = rs.getString("nombreTurno");
                                    String fecha = rs.getString("fecha");
                                    String usuario = rs.getString("usuario");
                                    String horaIngreso = rs.getString("hora");
                                    stop();
                                    //Enviar msj de que el empleado ya fue registrado (fecha, hora de ingreso,usuario con el que fue ingresado)
                                    JOptionPane.showMessageDialog(null, "Turno: "+nombreTurno+"\n Fecha: "+fecha+" "+horaIngreso+" \n Usuario: "+usuario, "El empleado ya tiene un registro de Entrada", JOptionPane.INFORMATION_MESSAGE);
                                    break;
                                }
                                else
                                {
                                    sql = "INSERT INTO ms_asistencia(nombreTurno,hora,tipoAcceso,ID_EMPLEADO,codigoUsuario,autorizacion) VALUES (?,?,?,?,?)";
                                    System.out.println(""+sql+login.codUsuario);
                                    PreparedStatement preparedStmt = c.prepareStatement(sql);
                                    preparedStmt.setString(1,nomTurno);
                                    preparedStmt.setString(2,nowDateTime);
                                    preparedStmt.setString(3,"Entrada");
                                    preparedStmt.setString(4,idEmpleado);
                                    preparedStmt.setString(5,login.codUsuario);
                                    preparedStmt.setString(6,"1");
                                    preparedStmt.executeUpdate();
                                    preparedStmt.close();
                                }
                            }
                            else if("Salida".equals(tipoAcceso) && "1".equals(confirmacion))
                            {
                                //Valida si horaFin es empty
                                sql = "SELECT nombreTurno, DATE_FORMAT(hora, '%d-%m-%Y') AS fecha,DATE_FORMAT(hora,'%H:%i:%s') AS hora,(SELECT nombre FROM ms_usuario WHERE codigo = codigoUsuario) As usuario FROM ms_asistencia WHERE DATE(hora) = '"+nowDate+"' AND tipoAcceso = 'Salida' AND ID_EMPLEADO = '"+idEmpleado+"' AND nombreTurno = '"+nomTurno+"'";
                                System.out.println(sql);
                                pstmt = c.prepareStatement(sql);
                                rs = pstmt.executeQuery();
                                if (rs.next() == true){

                                    String nombreTurno = rs.getString("nombreTurno");
                                    String fecha = rs.getString("fecha");
                                    String usuario = rs.getString("usuario");
                                    String horaIngreso = rs.getString("hora");
                                    stop();
                                    //Enviar msj de que el empleado ya fue registrado (fecha, hora de ingreso,usuario con el que fue ingresado)
                                    JOptionPane.showMessageDialog(null, "Turno: "+nombreTurno+"\n Fecha: "+fecha+" "+horaIngreso+" \n Usuario: "+usuario, "El empleado ya tiene un registro de Salida", JOptionPane.INFORMATION_MESSAGE);
                                    break;
                                }
                                else
                                {
                                    sql = "INSERT INTO ms_asistencia(nombreTurno,hora,tipoAcceso,ID_EMPLEADO,codigoUsuario,autorizacion) VALUES (?,?,?,?,?)";
                                    System.out.println(""+sql+login.codUsuario);
                                    PreparedStatement preparedStmt = c.prepareStatement(sql);
                                    preparedStmt.setString(1,nomTurno);
                                    preparedStmt.setString(2,nowDateTime);
                                    preparedStmt.setString(3,"Salida");
                                    preparedStmt.setString(4,idEmpleado);
                                    preparedStmt.setString(5,login.codUsuario);
                                    preparedStmt.setString(6,"1");
                                    preparedStmt.executeUpdate();
                                    preparedStmt.close();
                                }
                            }
                        }
                        else 
                        {
                            //Si la confirmacion es Cancelada
                        }
                        //break;
                            //JOptionPane.showMessageDialog(null,"Your password is "+new String(pwd.getPassword()));
                    }
                   
                }
                else
                {
                    //Si no encuentra alguna huella correspondiente al nombre lo indica con un mensaje
                    //stop();
                    //JOptionPane.showMessageDialog(null, "No existe ningún registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
                    //return;
                    //break;
                }
            }
            if(bandera.equals("0"))
            {
                lblCodigo.setText("");
                lblNombre.setText("");
                lblRfc.setText("");
                JOptionPane.showMessageDialog(null, "No existe ningún registro que coincida con la huella", "Verificacion de Huella", JOptionPane.ERROR_MESSAGE);
            }
            
            Reclutador.clear();
            txtArea.setText(null);
            //lblImagenHuella.setIcon(null);
            stop();
            //EstadoHuellas();
            setTemplate(null);
            //mensaje avisando que falló la wea
            start();
            
        } catch (SQLException e) {
            //Si ocurre un error lo indica en la consola
            System.err.println("Error al identificar huella dactilar." + e.getMessage());
        } finally {
            con.desconectar();
        }
    }
    
    ////  esto es para verificar huella
    public void procesarCaptura(DPFPSample sample) {

        featureinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        featureverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

        if (featureinscripcion != null) 
        {
            try {

                System.out.println("Las caracteristicas de la huella han sido creadas ");
                Reclutador.addFeatures(featureinscripcion);
                Image image = CrearImagenHuella(sample);
                DibujarHuella(image);
                
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error: " + ex.getMessage());
            } 
        }
    }
    
    // verifica huella

    public Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
                image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), image.SCALE_DEFAULT)
        ));
        repaint();
    }

    public void EstadoHuellas() {
        EnviarTexto("Muestra de Huellas necesarias para Guardar Template: " + (Reclutador.getFeaturesNeeded()));
    }

    public void EnviarTexto(String string) {
        txtArea.append(string + "\n");
    }

    public void start() {
        Lector.startCapture();
        EnviarTexto("Utilizando lector de huella");
    }

    public void stop() {
        Lector.stopCapture();
        EnviarTexto("No se está usando el lector de huella");
    }

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }
    ////////////////////////////////////////////////////////////////////
    
String codigoEmpleados;
public String datos(String codigoEmpleado){
    
    codigoEmpleados =codigoEmpleado;
    System.out.println("DATOS "+codigoEmpleado);         
    
    
    return codigoEmpleado;
}
static String sha1(String input) throws NoSuchAlgorithmException {
        MessageDigest mDigest = MessageDigest.getInstance("SHA1");
        byte[] result = mDigest.digest(input.getBytes());
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < result.length; i++) {
            sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));
        }
         
        return sb.toString();
    }


    ///////////////////////////// fin otros metodos

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.RSButtonRiple btnCerrar;
    private rojeru_san.RSButtonRiple btnMinimizar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAcceso;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblCodigo1;
    private javax.swing.JLabel lblCodigo2;
    private javax.swing.JLabel lblCodigo3;
    private javax.swing.JLabel lblEmpresa;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblImagenHuella;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblRfc;
    private javax.swing.JLabel lblTurno;
    private rojerusan.RSPanelImage rSPanelImage1;
    private rojerusan.RSPanelImage rSPanelImage2;
    private rojeru_san.RSPanelsSlider rSPanelsSlider1;
    private rojeru_san.RSPanelsSlider rSPanelsSlider2;
    private rojeru_san.RSPanelsSlider rSPanelsSlider3;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}
